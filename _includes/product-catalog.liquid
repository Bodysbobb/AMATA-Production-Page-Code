<style>
/* Critical CSS to be inlined in <head> */
.product-catalog {
  width: 100%;
  max-width: 1200px;
  min-height: 200px;
  margin: 0 auto;
  padding: 20px 0;
}

/* Product Grid - Critical for LCP */
.product-grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 20px;
  width: 100%;
}

/* Prevent layout shift with aspect ratio */
.product-image-wrapper {
  position: relative;
}

.product-image {
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: 100%; /* Default 1:1 aspect ratio */
  overflow: hidden;
  background-color: #f0f0f0; /* Placeholder color */
  border-radius: 4px;
}

.product-image img {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.product-description {
  margin-top: 8px;
  font-size: 14px;
  color: var(--global-text-color, #333);
  line-height: 1.4;
  text-align: center; /* Center align the text */
  width: 100%; /* Ensure full width */
}

/* Critical Responsive Breakpoints */
@media screen and (max-width: 1200px) {
  .product-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}

@media screen and (max-width: 768px) {
  .product-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media screen and (max-width: 576px) {
  .product-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}
</style>

<!-- Defer non-critical CSS -->
<link rel="stylesheet" href="{{ '/assets/css/product-catalog.css' | relative_url }}" media="print" onload="this.media='all'">
<noscript><link rel="stylesheet" href="{{ '/assets/css/product-catalog.css' | relative_url }}"></noscript>

<div class="product-catalog {% if include.theme %}theme-{{ include.theme }}{% endif %}" 
     data-json-url="{{ '/assets/data/' | append: include.json_data_file | relative_url }}">
  
  <div class="catalog-filters">
    <div class="top-filter-section">
      <div class="top-filter-tags-wrapper">
        <div class="top-filter-tags"></div>
      </div>
      <div class="filter-sort">
        <button class="filter-sort-button"></button>
        <div class="filter-dropdown">
          <div class="selected-filters">
            <h4></h4>
            <div class="selected-filters-list"></div>
            <button class="clear-all-filters"></button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="product-grid"></div>
</div>

<!-- Inline critical JS for initial loading -->
<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Global state
    window.productCatalog = {
      data: null,
      activeFilters: [],
      currentLightboxIndex: -1
    };
    
    // Initialize catalogs
    const catalogs = document.querySelectorAll('.product-catalog[data-json-url]');
    
    catalogs.forEach(function(catalog) {
      const jsonUrl = catalog.getAttribute('data-json-url');
      
      // Load JSON data
      fetch(jsonUrl)
        .then(response => response.json())
        .then(data => {
          // Store data globally
          window.productCatalog.data = data;
          
          // Initialize product grid (critical for LCP)
          initProductGrid(catalog, data);
          
          // Initialize filter UI immediately - key change
          initBasicFilterUI(catalog, data);
        })
        .catch(error => {
          console.error("Error loading product data:", error);
        });
    });
    
    // Initialize filter UI with basic structure
    function initBasicFilterUI(container, data) {
      // Configure filter UI visibility based on settings
      if (!data.ui.show_top_filters && !data.ui.show_dropdown_filters) {
        const filterSection = container.querySelector('.catalog-filters');
        if (filterSection) filterSection.style.display = 'none';
        return;
      }
      
      // Set up filter button text
      const filterSortButton = container.querySelector('.filter-sort-button');
      if (filterSortButton) {
        filterSortButton.textContent = data.ui.labels?.filter_button || 'Filter & Sort';
      }
      
      // Hide top filters if disabled
      if (data.ui.show_top_filters === false) {
        const topFiltersWrapper = container.querySelector('.top-filter-tags-wrapper');
        if (topFiltersWrapper) topFiltersWrapper.style.display = 'none';
      }
      
      // Hide dropdown filters if disabled
      if (data.ui.show_dropdown_filters === false) {
        const filterSort = container.querySelector('.filter-sort');
        if (filterSort) filterSort.style.display = 'none';
      }
      
      // Add "All" filter as placeholder until the full JS loads
      const topFiltersContainer = container.querySelector('.top-filter-tags');
      if (topFiltersContainer && data.ui.show_top_filters !== false) {
        const allFilter = document.createElement('a');
        allFilter.href = '#';
        allFilter.className = 'filter-tag active';
        allFilter.setAttribute('data-filter', 'all');
        allFilter.textContent = 'All';
        topFiltersContainer.appendChild(allFilter);
        
        // Add some placeholder filters with real tag names if available
        if (data.topFilters && data.topFilters.length > 0) {
          for (let i = 0; i < Math.min(3, data.topFilters.length); i++) {
            const filterTag = document.createElement('a');
            filterTag.href = '#';
            filterTag.className = 'filter-tag';
            filterTag.setAttribute('data-filter', data.topFilters[i].value);
            filterTag.textContent = data.topFilters[i].display;
            topFiltersContainer.appendChild(filterTag);
          }
        }
      }
    }
    
    // Create a single product item
    function createProductItem(product, data, index) {
      const productItem = document.createElement('div');
      productItem.className = 'product-item';
      productItem.id = `enlarge-${product.description}`;
      productItem.setAttribute('data-tags', product.tags.join(' '));
      productItem.setAttribute('data-index', index);
      
      // Create product image wrapper
      const imageWrapper = document.createElement('div');
      imageWrapper.className = 'product-image-wrapper';
      
      // Create product badge if needed
      if (data.ui.badge_categories && product.tags.some(tag => tag === 'ยอดฮิต' || tag === 'TopSell')) {
        const badge = document.createElement('span');
        badge.className = 'product-badge image-badge';
        badge.style.backgroundColor = '#E74C3C';
        badge.textContent = 'ยอดฮิต';
        imageWrapper.appendChild(badge);
      }
      
      // Create product link
      const link = document.createElement('a');
      link.href = product.path;
      link.className = 'product-link';
      link.setAttribute('data-lightbox', 'product-catalog');
      link.setAttribute('data-title', product.description);
      link.setAttribute('data-product-slug', product.description);
      link.setAttribute('data-index', index);
      
      // Create product image with proper aspect ratio container
      const imageContainer = document.createElement('div');
      imageContainer.className = 'product-image';
      
      const img = document.createElement('img');
      img.alt = product.alt || product.description;
      img.title = product.title || product.description;
      img.width = 400;
      img.height = 400;
      
      // Set up lazy loading
      img.className = 'loading';
      img.dataset.src = product.path;
      img.src = 'data:image/svg+xml,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 400 400\' fill=\'%23f0f0f0\'%3E%3Crect width=\'400\' height=\'400\' /%3E%3C/svg%3E';
      
      imageContainer.appendChild(img);
      link.appendChild(imageContainer);
      imageWrapper.appendChild(link);
      productItem.appendChild(imageWrapper);
      
      // Add description if available
      if (product.description) {
        const description = document.createElement('div');
        description.className = 'product-description';
        description.textContent = product.description;
        productItem.appendChild(description);
      }
      
      return productItem;
    }
    
    // Core function to initialize the product grid
    function initProductGrid(container, data) {
      const productGrid = container.querySelector('.product-grid');
      const uiSettings = data.ui;
      
      // Create product items
      data.products.forEach((product, index) => {
        const productItem = createProductItem(product, data, index);
        productGrid.appendChild(productItem);
      });
      
      // Initialize lazy loading for images
      initLazyLoading();
    }
    
    // Initialize lazy loading
    function initLazyLoading() {
      if ('IntersectionObserver' in window) {
        const lazyImageObserver = new IntersectionObserver((entries, observer) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const img = entry.target;
              if (img.dataset.src) {
                // Create a new image to preload
                const tempImg = new Image();
                
                // When the new image loads, update the visible image
                tempImg.onload = function() {
                  img.src = img.dataset.src;
                  img.classList.remove('loading');
                  img.classList.add('loaded');
                  // Remove the data-src to prevent any potential reloading
                  img.removeAttribute('data-src');
                };
                
                // Start loading the image
                tempImg.src = img.dataset.src;
                
                // Stop observing this image
                observer.unobserve(img);
              }
            }
          });
        }, {
          rootMargin: '100px 0px', // Load images before they come into view
          threshold: 0.01
        });
        
        // Observe all lazy images
        document.querySelectorAll('.product-image img[data-src]').forEach(img => {
          lazyImageObserver.observe(img);
        });
      } else {
        // Fallback for older browsers - load all images immediately
        document.querySelectorAll('.product-image img[data-src]').forEach(img => {
          img.src = img.dataset.src;
          img.classList.remove('loading');
          img.classList.add('loaded');
          img.removeAttribute('data-src');
        });
      }
    }
  });
</script>

<!-- Use defer attribute directly instead of delayed loading -->
<script src="{{ '/assets/js/product-catalog-json.js' | relative_url }}" defer></script>