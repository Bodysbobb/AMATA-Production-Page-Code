<style>
/* Critical CSS to be inlined in <head> */
.product-catalog {
  width: 100%;
  max-width: 1200px;
  min-height: 200px;
  margin: 0 auto;
  padding: 20px 0;
}
.product-grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 20px;
  width: 100%;
}
.product-image-wrapper {
  position: relative;
}
.product-image {
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: 100%;
  overflow: hidden;
  background-color: #f0f0f0;
  border-radius: 4px;
}
.product-image img {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: contain;
}
.product-description {
  margin-top: 8px;
  font-size: 14px;
  color: var(--global-text-color, #333);
  line-height: 1.4;
  text-align: center;
  width: 100%;
}
.top-filter-tags-wrapper {
  overflow-x: auto;
  overflow-y: hidden;
  -webkit-overflow-scrolling: touch;
  padding-bottom: 5px;
  flex: 1;
  max-width: calc(100% - 150px);
  display: flex;
  align-items: center;
  height: 40px;
}
.top-filter-tags {
  display: flex;
  flex-wrap: nowrap;
  gap: 10px;
  white-space: nowrap;
  padding-bottom: 0;
  width: fit-content;
  min-width: 100%;
  height: 100%;
  align-items: center;
}
.filter-tag {
  padding: 8px 16px;
  cursor: pointer;
  font-size: clamp(12px, 0.9vw, 14px);
  border-radius: 3px;
  background-color: var(--global-code-bg-color, #f8f9fa);
  white-space: nowrap;
  color: var(--global-text-color, #333);
  text-decoration: none;
  transition: all 0.2s ease;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  height: 35px;
}
.filter-tag:hover:not(.active) {
  background-color: var(--global-hover-color, #2980b9);
  color: var(--global-hover-text-color, #fff);
  text-decoration: none;
}
.filter-tag.active {
  background-color: var(--global-theme-color, #3498db);
  color: var(--global-badge-text-color, #fff);
  text-decoration: none;
}
.filter-tag.active:hover {
  text-decoration: none;
}
.filter-sort {
  position: relative;
  min-width: 100px;
  width: 100px;
  height: 40px;
  margin-left: 10px;
  flex-shrink: 0;
  display: flex;
  align-items: center;
}
.filter-sort-button {
  width: 100px;
  height: 35px;
}
.filter-dropdown {
  position: absolute;
  right: 0;
  top: 100%;
  width: 300px;
  background: var(--global-card-bg-color, #fff);
  border: 1px solid var(--global-divider-color, #e5e5e5);
  border-radius: 4px;
  box-shadow: 0 4px 12px var(--global-shadow-color, rgba(0, 0, 0, 0.1));
  padding: 15px;
  z-index: 100;
  display: none;
  max-height: 70vh;
  overflow-y: auto;
}
.filter-dropdown.active {
  display: block;
}
@media screen and (max-width: 1200px) {
  .product-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}
@media screen and (max-width: 768px) {
  .product-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  .filter-sort, .filter-sort-button {
    width: 90px;
    min-width: 90px;
  }
  .top-filter-tags-wrapper {
    max-width: calc(100% - 120px);
  }
}
@media screen and (max-width: 576px) {
  .product-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  .filter-sort, .filter-sort-button {
    width: 80px;
    min-width: 80px;
  }
  .top-filter-tags-wrapper {
    max-width: calc(100% - 100px);
  }
}
</style>

<!-- Defer non-critical CSS -->
<link rel="stylesheet" href="{{ '/assets/css/product-catalog.css' | relative_url }}" media="print" onload="this.media='all'">
<noscript><link rel="stylesheet" href="{{ '/assets/css/product-catalog.css' | relative_url }}"></noscript>

<div class="product-catalog {% if include.theme %}theme-{{ include.theme }}{% endif %}" 
     data-json-url="{{ '/assets/data/' | append: include.json_data_file | relative_url }}">
  
  <div class="catalog-filters">
    <div class="top-filter-section">
      <div class="top-filter-tags-wrapper">
        <div class="top-filter-tags"></div>
      </div>
      <div class="filter-sort">
        <button class="filter-sort-button"></button>
        <div class="filter-dropdown">
          <div class="selected-filters">
            <h4></h4>
            <div class="selected-filters-list"></div>
            <button class="clear-all-filters"></button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="product-grid"></div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    window.productCatalog = {
      data: null,
      activeFilters: [],
      currentLightboxIndex: -1
    };
    
    const catalogs = document.querySelectorAll('.product-catalog[data-json-url]');
    
    catalogs.forEach(function(catalog) {
      const jsonUrl = catalog.getAttribute('data-json-url');
      
      fetch(jsonUrl)
        .then(response => response.json())
        .then(data => {
          window.productCatalog.data = data;
          initProductGrid(catalog, data);
          initBasicFilterUI(catalog, data);
        })
        .catch(error => {
          console.error("Error loading product data:", error);
        });
    });
    
    function initBasicFilterUI(container, data) {
      if (!data.ui.show_top_filters && !data.ui.show_dropdown_filters) {
        const filterSection = container.querySelector('.catalog-filters');
        if (filterSection) filterSection.style.display = 'none';
        return;
      }
      
      const filterSortButton = container.querySelector('.filter-sort-button');
      if (filterSortButton) {
        filterSortButton.textContent = data.ui.labels?.filter_button || 'Filter & Sort';
      }
      
      if (data.ui.show_top_filters === false) {
        const topFiltersWrapper = container.querySelector('.top-filter-tags-wrapper');
        if (topFiltersWrapper) topFiltersWrapper.style.display = 'none';
      }
      
      if (data.ui.show_dropdown_filters === false) {
        const filterSort = container.querySelector('.filter-sort');
        if (filterSort) filterSort.style.display = 'none';
      }
      
      const topFiltersContainer = container.querySelector('.top-filter-tags');
      if (topFiltersContainer && data.ui.show_top_filters !== false) {
        const allFilter = document.createElement('a');
        allFilter.href = '#';
        allFilter.className = 'filter-tag active';
        allFilter.setAttribute('data-filter', 'all');
        allFilter.textContent = 'All';
        topFiltersContainer.appendChild(allFilter);
        
        if (data.topFilters && data.topFilters.length > 0) {
          for (let i = 0; i < Math.min(3, data.topFilters.length); i++) {
            const filterTag = document.createElement('a');
            filterTag.href = '#';
            filterTag.className = 'filter-tag';
            filterTag.setAttribute('data-filter', data.topFilters[i].value);
            filterTag.textContent = data.topFilters[i].display;
            topFiltersContainer.appendChild(filterTag);
          }
        }
      }
    }
    
    function createProductItem(product, data, index) {
      const productItem = document.createElement('div');
      productItem.className = 'product-item';
      productItem.id = `enlarge-${product.description}`;
      productItem.setAttribute('data-tags', product.tags.join(' '));
      productItem.setAttribute('data-index', index);
      
      const imageWrapper = document.createElement('div');
      imageWrapper.className = 'product-image-wrapper';
      
      if (data.ui.badge_categories && product.tags.some(tag => tag === 'ยอดฮิต' || tag === 'TopSell')) {
        const badge = document.createElement('span');
        badge.className = 'product-badge image-badge';
        badge.style.backgroundColor = '#E74C3C';
        badge.textContent = 'ยอดฮิต';
        imageWrapper.appendChild(badge);
      }
      
      const link = document.createElement('a');
      link.href = product.path;
      link.className = 'product-link';
      link.setAttribute('data-lightbox', 'product-catalog');
      link.setAttribute('data-title', product.description);
      link.setAttribute('data-product-slug', product.description);
      link.setAttribute('data-index', index);
      
      const imageContainer = document.createElement('div');
      imageContainer.className = 'product-image';
      
      const img = document.createElement('img');
      img.alt = product.alt || product.description;
      img.title = product.title || product.description;
      img.width = 400;
      img.height = 400;
      
      img.className = 'loading';
      img.dataset.src = product.path;
      img.src = 'data:image/svg+xml,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 400 400\' fill=\'%23f0f0f0\'%3E%3Crect width=\'400\' height=\'400\' /%3E%3C/svg%3E';
      
      imageContainer.appendChild(img);
      link.appendChild(imageContainer);
      imageWrapper.appendChild(link);
      productItem.appendChild(imageWrapper);
      
      if (product.description) {
        const description = document.createElement('div');
        description.className = 'product-description';
        description.textContent = product.description;
        productItem.appendChild(description);
      }
      
      return productItem;
    }
    
    function initProductGrid(container, data) {
      const productGrid = container.querySelector('.product-grid');
      const uiSettings = data.ui;
      
      data.products.forEach((product, index) => {
        const productItem = createProductItem(product, data, index);
        productGrid.appendChild(productItem);
      });
      
      initLazyLoading();
    }
    
    function initLazyLoading() {
      if ('IntersectionObserver' in window) {
        const lazyImageObserver = new IntersectionObserver((entries, observer) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const img = entry.target;
              if (img.dataset.src) {
                const tempImg = new Image();
                
                tempImg.onload = function() {
                  img.src = img.dataset.src;
                  img.classList.remove('loading');
                  img.classList.add('loaded');
                  img.removeAttribute('data-src');
                };
                
                tempImg.src = img.dataset.src;
                observer.unobserve(img);
              }
            }
          });
        }, {
          rootMargin: '100px 0px',
          threshold: 0.01
        });
        
        document.querySelectorAll('.product-image img[data-src]').forEach(img => {
          lazyImageObserver.observe(img);
        });
      } else {
        document.querySelectorAll('.product-image img[data-src]').forEach(img => {
          img.src = img.dataset.src;
          img.classList.remove('loading');
          img.classList.add('loaded');
          img.removeAttribute('data-src');
        });
      }
    }
  });
</script>

<script src="{{ '/assets/js/product-catalog-json.js' | relative_url }}" defer></script>